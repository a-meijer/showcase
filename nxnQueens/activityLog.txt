VERSION 001: Project Complete - Closed
    2021-10-10  :   C++ solution is abandoned due to a bug, so this project is just measuring the results for C.
                    For more information on the bug, see Sample1 in the Bugs project directory.
                    Future versions of this project could include a comparison to other solutions.
                    Entered results into readme; updated/proofread readme.
                    Closed Complete.

BETA 002: Write Results - Closed
    2021-10-10  :   Completed under BETA001:Add_Timing
                    Closed

BETA 001: Add Timing - Closed
    2021-10-10  :   Added timing to nxnQueens.c using clock() function and time.h. It doesn't measure in seconds but it seems okay.
                    Hopefully I get some meaningful results for higher values of N.
                    I'm using a markdown generating website to write up the results in a table to include in README.md
                    It's pretty easy, I change the define N line and that's all; compile and run; it prints the results; I enter thye results into the table generator.
                    I notice the ticks are inconsistent. Each time I run the executable the clock is slightly different.
                    In future, I will run many more trials and take averages.
                    Wow, N=14 took a long time. I'll just do one more, and then I leave it on N=16 so next time I get back to this project if I run it dry, it will just hang haha
                    https://www.tablesgenerator.com/markdown_tables
                    Completed Closed.

***** Following tasks are all CLOSED: *****

ALPHA 002: Unit Testing nxnQueens.c - Closed
    2021-09-20  :   unitTests.c is for testing the deep copy of boards, so I have copied elements of nxnQueens.c into unitTests.c
    2021-10-02  :   Running empty unit tests for deep copying the chess board; compiles and runs. gcc unitTests.c -o ../bin/deepCopyUnitTest
    2021-10-02  :   Adding tests for deepy copy: simply change one of the values in child board and compare to parent.
    2021-10-02  :   Program was soft-crashing at for loops; moved index variable initialization outside of the loops: fixed.
                    Nevermind, that didn't fix it. Very strange problem I can't seem to approach with print statements.
                    This is an opportunity to explore the VS Code debugger. Perhaps step-by-step processing can come in handy. Nevermind ~
                    Added (struct BTNode *) to malloc lines. Testing again ~
                    I've removed a lot of code to get at what is blocking this up, and it makes no sense.
                    LinkedList.c still works, so what's the difference? nodes[i] = (struct LLNode *)malloc(sizeof(struct LLNode));?
                    Changing "struct BTNode * root;" to "struct BTNode root;" and I'm working with that instead; making similar to linkedList.C
                    The difference is that I know how many nodes I am making ahead of time in linkedList.C
    2021-10-03  :   I will attempt to do-away with structs entirely and represent board states as 2D char arrays     
                    ^ Drafting in unitTests.c
                    I did some quick tests of the syntax and now I'm going to draf out an expand and check function.
                    The check function is to check if a square is under attack by any queen already placed.
    2021-10-04  :   Drafting check function; compiling; Seems to be working. Let's make the same test cases from horizontal and diagonal testing from cpp solution
                    Hardcoded tests; runs; adding answer keys. . .
                    Hey, it worked. I failed some tests. It seems like I'm missing all diagonal checks.    
                    I'm changing some tests to cover more diagonal variety                       
                    New tests confirm, no diagnonal collisions are being detected. Fixed logic error in check function; fixed wrong-variable error in check function; All tests pass.
    2021-10-10  :   Hard-coded unit tests for expand function; compiling. . . running. . . "test 2 failed"
                    Here's what I got:
                >   Found solution; board:
                >   1000
                >   0000
                >   0001
                >   0100
                >
                >   Found solution; board:
                >   1000
                >   0000
                >   0001
                >   0000
    2021-10-10  :   Changed "increment h" from "h = h+1" to "h2 = h+1;"            
                    All tests pass!
                    Adding expand function to nxnQueens.c
    2021-10-10  :   Closed; unit testing complete for unitTests.c
ALPHA 001: Unit Testing nxnQueens.cpp - Closed
    2021-06-26  :   Horizontal and Diagonal functions all pass. Imported solution from separate project.
    2021-06-29  :   See nxnQueens.cpp for those notes in the comments. Anyways, I am creating src and bin directories now. Updated compilation instructions for src and bin.
    2021-10-10  :   The cpp implementation has created a mysterious and obstructive bug, so I will be moving it to a bug archive project as a sample, and then simplifying the purpose of the project accordingly.
                    Closed
INDEV 010: Final Drafts - Closed
    2021-01-26  :   Consider the possibility of iterative backtracking while you work on the recursive backtracking implementations.    
    2021-06-28  :   Draft all files for unit testing: Cpp solution
    2021-06-29  :   Updated compilation instructions for src and bin.
    2021-07-22  :   Uploading changes to nxnQueens.c/diagonal . . .
    2021-07-22  :   Compilation Errors:
                    nxnQueens.c: In function 'expand':
                    nxnQueens.c:128:19: warning: passing argument 1 of 'horizontal' from incompatible pointer type [-Wincompatible-pointer-types]
                    if(horizontal(n->board, n->h) == '1'){
                                ^
                    nxnQueens.c:27:6: note: expected 'char * (*)[4]' but argument is of type 'char (*)[4]'
                    char horizontal(char * b[N][N], int h){
                    ^~~~~~~~~~
    2021-07-25  :   Updated function call from "n->board" to "&n->board"
    2021-07-27  :   PS C:\PROG\showcase\nxnQueens\src> gcc nxnQueens.c -Wall -o seigh
                    nxnQueens.c: In function 'expand':
                    nxnQueens.c:128:43: warning: passing argument 1 of 'horizontal' from incompatible pointer type [-Wincompatible-pointer-types]
                        char horizontalReturnVal = horizontal(n->board, n->h);
                                                            ^
                    nxnQueens.c:27:6: note: expected 'char * (*)[4]' but argument is of type 'char (*)[4]'
                    char horizontal(char * b[N][N], int h){
                        ^~~~~~~~~~
                    nxnQueens.c:129:39: warning: passing argument 1 of 'diagonal' from incompatible pointer type [-Wincompatible-pointer-types]
                        char diagonalReturnVal = diagonal(n->board, n->h);
                                                        ^
                    nxnQueens.c:57:6: note: expected 'char * (*)[4]' but argument is of type 'char (*)[4]'
                    char diagonal(char * b[N][N], int h){
                        ^~~~~~~~
                    nxnQueens.c:129:10: warning: unused variable 'diagonalReturnVal' [-Wunused-variable]
                        char diagonalReturnVal = diagonal(n->board, n->h);
                            ^~~~~~~~~~~~~~~~~
                    nxnQueens.c:142:1: warning: control reaches end of non-void function [-Wreturn-type]
                    }
                    ^
    2021-07-27  :   Added ChessBoard struct (as a workaround) - Syntax errors. 
    2021-07-27  :   ???
    2021-08-06  :   How is this taking so long? Compiling at "PS C:\PROG\showcase\NxNQueens\src>" with "gcc nxnQueens.c -o ../bin/aug5session"
    2021-08-06  :   Running with "../bin/aug5session"
    2021-08-06  :   nxnQueens.c:175:17: error: 'root' is a pointer; did you mean to use '->'?
    2021-08-06  :   After a few syntactical changes, nxnQueens.c compiles and runs successfully.
    2021-08-16  :   Somehow ten days have gone by. I thought I was here earlier this weekend. . .
    2021-08-16  :   Drafted expand function by copying the code from main. Passing a parent to the expand function is pointless: I don't use it.
    2021-08-16  :   Runs, but no output. I added some print statements that aren't very helpful.
    2021-08-16  :   Uploading for remote debugging. Current output: "Initializing. . .Allocating Space. . ."
    2021-08-22  :   Debugging nxnQueens.c - having an issue with malloc where the program is crashing.
    2021-08-22  :   Changing the enconding for nxnQueens.c in progress. . .
    2021-09-20  :   Writing separate program for testing deep-copy of boards unitTests.c
    2021-10-10  :   drafted expand function in nxnQueens.c. Unit testing complete; nxnQueens is complete.
                    the structure for nxnQueens.cpp needs to change: BTTree.build and BTTree.traverse
                    Codebase for nxnQueens.cpp and unitTests.cpp is a mess!
                    I am starting by drafting and then testing the BTNode and BTTree classes and constructors.
                    I am having the same issue with cpp as I was having with c before I removed structs.
                    Here then, I leave you a study for next time. I will move these files to another project.
                    Closed
INDEV 009: Recursive Backtracking in C - Closed
    2021-01-10  :   I realized that with a recursive approach to nxnQueens, the struct/class I am using doesn't need a pointer to a parent node.
                    This information can possibly be used in the construction of an iterative solution to nxnQueens in the future,
                    which ties back to the original aim of this project, to compare iterative and recursive solutions for backtracking. Meh.
    2021-01-10  :   nxnQueens.c
    2021-01-11  :   I realize my solution is not the best. . . The horizontal and diagonal functions don't require a BTNode, so I could be creating
                    a board, checking it with both horizontal and diagonal functions, and then creating the BTNode afterward.
                    Definitely I can chalk it up to cowboy coding, but it's a small program, so it's [not] okay to have such inaccuracies.
    2021-01-26  :   Uploading incomplete code to showcase, so I can solve the remainder with pen and paper rather than by playing guess-and-check with the compiler.
    2021-06-29  :   Compiling nxnQueens.c . . . Let's see what's up with this program; I know expand is partially complete, and there is no horizontal or diagonal implementation. . .
    2021-06-29  :   Compilation errors.
    2021-06-29  :   This encoding is different from the .cpp version that I've already passed testing, so I'll try writing it from scratch
    2021-06-29  :   0 is empty and 1 is Queen on a 2D char array. Since I am placing left to right I am simplifying the horizontal and diagonal requirements (adding the h parameter).
    2021-06-29  :   I think the idea in my work was that I would include no collision detecting, so that the solution is as if each Queen has no attacks. Let's get that running. But will it enumerate?
    2021-06-30  :   It runs but I don't know if the output is correct and I get compilation warnings for the malloc statements. What is really going on here?
    2021-06-30  :   Included stdlib.h for malloc; compiles clean: PS C:\PROG\showcase\NxNQueens\src> gcc nxnQueens.c -o ../bin/cQueens
    2021-06-30  :   Completed draft of horizontal function; added to expand; compiling and running . . .
    2021-06-30  :   It appears that the expand function does not have a return statement . . . ?
    2021-06-30  :   Changed "row" to "column" on line 19; yikes-emoji.
    2021-06-30  :   I will plan to overwrite this at a later time; uploading changes. . . Isn't this supposed to be an iterative solution for sake of comparison anyway? Pending . . .
    2021-06-30  :   Recall, it is not iterative v.s. recursive, it is datastructure v.s. class. Try making better use of the BTNode class in the cpp solution!
    2021-07-25  :   Updating board to struct for simplified function-passing 
    2021-08-22  :   I don't need an array of child nodes. Since the algorithm is depth first, I just need a pointer to the next child, and an index. Simplifying the encoding. . .
    2021-08-29  :   Simplified Structure->  struct BTNode {
                                                int h; //the current column in the algorithm
                                                char b[N][N]; //board state
                                                struct BTNode* nextChild; //pointer to child nodes
    2021-08-30  :   Stuck in expansion loop. . . Not testing again without print statements. Nested function call is going off too frequently. Analyzing code. The more I look at this, the more I realize it is blatantly unfinished.
                    Adding horizontal and diagonal checking in the expand function. Writing comments for each step of the algorithm.
    2021-09-20  :   Writing separate program for testing deep-copy of boards unitTests.c     
    2021-10-02  :   unit testing of deep copy in progress
    2021-10-04  :   Change of plans, structs were removed from the nxnQueens.c. Just finished unit testing the check function.
                    Added new check function to nxnQueens.c
                    Oops, looks like nxnQueens already had an implementation of that, modified from nxnQueens.cpp
                    Oh well, the new check function is much more concise, so I'm looking good to draft my expand function next. Spooky recursion.
    2021-10-10  :   drafted expand function.
                    Unit tests complete; running enumeration!
                    enumeration when N = 8, result = 92
                    Success; closed nxnQueens.c. Now I need to finish nxnQueens.cpp
INDEV 008: Make a Linked List - Closed
    2021-01-04  :   To establish working syntax for structs, I will first encode a linkedlist solution before moving on to backtracking.
    2021-01-04  :   The C linked list is now complete, but it was producing a warning: incompatible implicit declaration of built-in function 'malloc'
                    This is because I neglected to include <stdlib.h>
    2021-01-05  :   Making a linked list in C++ should be much easier. Those pointers are confusing!
    2021-01-06  :   Closed Complete
INDEV 007: Test Results File - Closed
    2020-12-13  :   Removed unnecessary Cpp header files. Headerfiles are for when a class is being used for multiple source files; I don't need that.
    2020-12-13  :   Updated Readme with notes about compilation
    2020-12-13  :   Decided to include testing results as part of project.
    2020-12-13  :   Work in progress... 
    2021-01-04  :   ~?
    2021-06-29  :   Testing is decided: Notice the entry prefixes for this activity log: INDEV is for drafts, ALPHA is for unit testing, and BETA is for analysis.
    2021-06-29  :   Closed; see ALPHA log entries for unit tests.
INDEV 006: Add Instructions - Closed
    2020-11-15  :   Entry Created
    2020-11-15  :   Now that there are header files, remember to create compilation instructions in the Readme!
    2020-12-13  :   CLosed Complete
INDEV 005: Rewrite Readme - Closed
    2020-11-15  :   Entry Created
    2020-11-15  :   Rewrite the README according to the new scope of the project, to write 2 nxnQueens solutions.
    2020-11-14  :   Closed Complete
INDEV 004: Pivot Project - Closed
    2020-11-15  :   Entry Created
    2020-11-15  :   Maintain the new vision for the project is to create two files that solve nxnQueens, one with structs and one with classes. Glhf; let's make this quick.
    2020-11-15  :   I have experienced a VS Code warning while writing structs in C, "incomplete type is not allowed."
                    I may need to create a header file for this!
    2021-01-04  :   Closed Complete
INDEV 003: include Prototype1 in Readme - Closed
    2020-11-05  :   Entry Created
    2020-11-05  :   Write a paragraph summary of the first prototype, which will be recursive.
    Later prototypes will require one recursive algorithm and one iterative algorithm to compare space and time efficiency.
    This first prototype will only include the recursive example of backtracking.
    2020-11-15  :   CLosed Abandoned
INDEV 002: Define Terms - Closed
    2020-11-05  :   Entry Created
    2020-11-05  :   The readme should include a section to explain each of the two terms, recursion and backtracking.
    Consider the type of problem that backtracking is made to solve and how that type of problem can be represented simply.
    If it turns out that Backtracking is codeword for something like NP-Hard, this project will become a study of various algorithms for that class of problems, and I will pivot the project description.
    2020-11-06  :   It turns out that Backtracking is used to solve CSP, so I have updated the readme accordingly.
    Now I will need to include definitions for Iteration, Backtracking, Recursion, and CSP.
    2020-11-15  :   Closed Abandoned
INDEV 001: Update Project Description - Closed
    2020-11-05  :   Entry Created
    2020-11-05  :   The project description at the top of the readme should include mention of the possibility that no proof can be found.
    2020-11-06  :   Closed Complete

