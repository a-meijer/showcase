ALPHA001: Unit Testing nxnQueens.cpp - Open
    2021-06-26  :   Horizontal and Diagonal functions all pass. Imported solution from separate project.
    2021-06-29  :   See nxnQueens.cpp for those notes in the comments. Anyways, I am creating src and bin directories now. Updated compilation instructions for src and bin.


INDEV010: Final Drafts - Open
    2021-01-26  :   Consider the possibility of iterative backtracking while you work on the recursive backtracking implementations.    
    2021-06-28  :   Draft all files for unit testing: Cpp solution
    2021-06-29  :   Updated compilation instructions for src and bin.
    2021-07-22  :   Uploading changes to nxnQueens.c/diagonal . . .
    2021-07-22  :   Compilation Errors:
                    nxnQueens.c: In function 'expand':
                    nxnQueens.c:128:19: warning: passing argument 1 of 'horizontal' from incompatible pointer type [-Wincompatible-pointer-types]
                    if(horizontal(n->board, n->h) == '1'){
                                ^
                    nxnQueens.c:27:6: note: expected 'char * (*)[4]' but argument is of type 'char (*)[4]'
                    char horizontal(char * b[N][N], int h){
                    ^~~~~~~~~~
    2021-07-25  :   Updated function call from "n->board" to "&n->board"
    2021-07-27  :   PS C:\PROG\showcase\nxnQueens\src> gcc nxnQueens.c -Wall -o seigh
                    nxnQueens.c: In function 'expand':
                    nxnQueens.c:128:43: warning: passing argument 1 of 'horizontal' from incompatible pointer type [-Wincompatible-pointer-types]
                        char horizontalReturnVal = horizontal(n->board, n->h);
                                                            ^
                    nxnQueens.c:27:6: note: expected 'char * (*)[4]' but argument is of type 'char (*)[4]'
                    char horizontal(char * b[N][N], int h){
                        ^~~~~~~~~~
                    nxnQueens.c:129:39: warning: passing argument 1 of 'diagonal' from incompatible pointer type [-Wincompatible-pointer-types]
                        char diagonalReturnVal = diagonal(n->board, n->h);
                                                        ^
                    nxnQueens.c:57:6: note: expected 'char * (*)[4]' but argument is of type 'char (*)[4]'
                    char diagonal(char * b[N][N], int h){
                        ^~~~~~~~
                    nxnQueens.c:129:10: warning: unused variable 'diagonalReturnVal' [-Wunused-variable]
                        char diagonalReturnVal = diagonal(n->board, n->h);
                            ^~~~~~~~~~~~~~~~~
                    nxnQueens.c:142:1: warning: control reaches end of non-void function [-Wreturn-type]
                    }
                    ^
    2021-07-27  :   Added ChessBoard struct (as a workaround) - Syntax errors. 
    2021-07-27  :   ???
    2021-08-06  :   How is this taking so long? Compiling at "PS C:\PROG\showcase\NxNQueens\src>" with "gcc nxnQueens.c -o ../bin/aug5session"
    2021-08-06  :   Running with "../bin/aug5session"
    2021-08-06  :   nxnQueens.c:175:17: error: 'root' is a pointer; did you mean to use '->'?
    2021-08-06  :   After a few syntactical changes, nxnQueens.c compiles and runs successfully.
    2021-08-16  :   Somehow ten days have gone by. I thought I was here earlier this weekend. . .
    2021-08-16  :   Drafted expand function by copying the code from main. Passing a parent to the expand function is pointless: I don't use it.
    2021-08-16  :   Runs, but no output. I added some print statements that aren't very helpful.
    2021-08-16  :   Uploading for remote debugging. Current output: "Initializing. . .Allocating Space. . ."
    2021-08-22  :   Debugging nxnQueens.c - having an issue with malloc where the program is crashing.
    2021-08-22  :   Changing the enconding for nxnQueens.c in progress. . .


INDEV009: Recursive Backtracking in C - Open
    2021-01-10  :   I realized that with a recursive approach to nxnQueens, the struct/class I am using doesn't need a pointer to a parent node.
                    This information can possibly be used in the construction of an iterative solution to nxnQueens in the future,
                    which ties back to the original aim of this project, to compare iterative and recursive solutions for backtracking. Meh.
    2021-01-10  :   nxnQueens.c
    2021-01-11  :   I realize my solution is not the best. . . The horizontal and diagonal functions don't require a BTNode, so I could be creating
                    a board, checking it with both horizontal and diagonal functions, and then creating the BTNode afterward.
                    Definitely I can chalk it up to cowboy coding, but it's a small program, so it's [not] okay to have such inaccuracies.
    2021-01-26  :   Uploading incomplete code to showcase, so I can solve the remainder with pen and paper rather than by playing guess-and-check with the compiler.
    2021-06-29  :   Compiling nxnQueens.c . . . Let's see what's up with this program; I know expand is partially complete, and there is no horizontal or diagonal implementation. . .
    2021-06-29  :   Compilation errors.
    2021-06-29  :   This encoding is different from the .cpp version that I've already passed testing, so I'll try writing it from scratch
    2021-06-29  :   0 is empty and 1 is Queen on a 2D char array. Since I am placing left to right I am simplifying the horizontal and diagonal requirements (adding the h parameter).
    2021-06-29  :   I think the idea in my work was that I would include no collision detecting, so that the solution is as if each Queen has no attacks. Let's get that running. But will it enumerate?
    2021-06-30  :   It runs but I don't know if the output is correct and I get compilation warnings for the malloc statements. What is really going on here?
    2021-06-30  :   Included stdlib.h for malloc; compiles clean: PS C:\PROG\showcase\NxNQueens\src> gcc nxnQueens.c -o ../bin/cQueens
    2021-06-30  :   Completed draft of horizontal function; added to expand; compiling and running . . .
    2021-06-30  :   It appears that the expand function does not have a return statement . . . ?
    2021-06-30  :   Changed "row" to "column" on line 19; yikes-emoji.
    2021-06-30  :   I will plan to overwrite this at a later time; uploading changes. . . Isn't this supposed to be an iterative solution for sake of comparison anyway? Pending . . .
    2021-06-30  :   Recall, it is not iterative v.s. recursive, it is datastructure v.s. class. Try making better use of the BTNode class in the cpp solution!
    2021-07-25  :   Updating board to struct for simplified function-passing 
    2021-08-22  :   I don't need an array of child nodes. Since the algorithm is depth first, I just need a pointer to the next child, and an index. Simplifying the encoding. . .
    2021-08-29  :   Simplified Structure->  struct BTNode {
                                                int h; //the current column in the algorithm
                                                char b[N][N]; //board state
                                                struct BTNode* nextChild; //pointer to child nodes
    2021-08-30  :   Stuck in expansion loop. . . Not testing again without print statements. Nested function call is going off too frequently. Analyzing code. The more I look at this, the more I realize it is blatantly unfinished.
                    Adding horizontal and diagonal checking in the expand function. Writing comments for each step of the algorithm.
                    
};

INDEV008: Make a Linked List - Closed
    2021-01-04  :   To establish working syntax for structs, I will first encode a linkedlist solution before moving on to backtracking.
    2021-01-04  :   The C linked list is now complete, but it was producing a warning: incompatible implicit declaration of built-in function 'malloc'
                    This is because I neglected to include <stdlib.h>
    2021-01-05  :   Making a linked list in C++ should be much easier. Those pointers are confusing!
    2021-01-06  :   Closed Complete

INDEV007: Test Results File - Closed
    2020-12-13  :   Removed unnecessary Cpp header files. Headerfiles are for when a class is being used for multiple source files; I don't need that.
    2020-12-13  :   Updated Readme with notes about compilation
    2020-12-13  :   Decided to include testing results as part of project.
    2020-12-13  :   Work in progress... 
    2021-01-04  :   ~?
    2021-06-29  :   Testing is decided: Notice the entry prefixes for this activity log: INDEV is for drafts, ALPHA is for unit testing, and BETA is for analysis.
    2021-06-29  :   Closed; see ALPHA log entries for unit tests.

INDEV006: Add Instructions - Closed
    2020-11-15  :   Entry Created
    2020-11-15  :   Now that there are header files, remember to create compilation instructions in the Readme!
    2020-12-13  :   CLosed Complete

INDEV005: Rewrite Readme - Closed
    2020-11-15  :   Entry Created
    2020-11-15  :   Rewrite the README according to the new scope of the project, to write 2 nxnQueens solutions.
    2020-11-14  :   Closed Complete

INDEV004: Pivot Project - Closed
    2020-11-15  :   Entry Created
    2020-11-15  :   Maintain the new vision for the project is to create two files that solve nxnQueens, one with structs and one with classes. Glhf; let's make this quick.
    2020-11-15  :   I have experienced a VS Code warning while writing structs in C, "incomplete type is not allowed."
                    I may need to create a header file for this!
    2021-01-04  :   Closed Complete

INDEV003: include Prototype1 in Readme - Closed
    2020-11-05  :   Entry Created
    2020-11-05  :   Write a paragraph summary of the first prototype, which will be recursive.
    Later prototypes will require one recursive algorithm and one iterative algorithm to compare space and time efficiency.
    This first prototype will only include the recursive example of backtracking.
    2020-11-15  :   CLosed Abandoned

INDEV002: Define Terms - Closed
    2020-11-05  :   Entry Created
    2020-11-05  :   The readme should include a section to explain each of the two terms, recursion and backtracking.
    Consider the type of problem that backtracking is made to solve and how that type of problem can be represented simply.
    If it turns out that Backtracking is codeword for something like NP-Hard, this project will become a study of various algorithms for that class of problems, and I will pivot the project description.
    2020-11-06  :   It turns out that Backtracking is used to solve CSP, so I have updated the readme accordingly.
    Now I will need to include definitions for Iteration, Backtracking, Recursion, and CSP.
    2020-11-15  :   Closed Abandoned

INDEV001: Update Project Description - Closed
    2020-11-05  :   Entry Created
    2020-11-05  :   The project description at the top of the readme should include mention of the possibility that no proof can be found.
    2020-11-06  :   Closed Complete

