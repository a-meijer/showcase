INDEV005 - ACTIVE - OPEN 10/28/2020 - PREPARE_FOR_TESTING
    Prepare one of the sample projects for testing by producing a set of requirements for the Tester object.
    Consider that next steps are to do the same for decorator objects to compare the requirements.
INDEV004 - RESOLVED - CLOSED 10/6/2020 - OPEN-SOURCE_EXAMPLES
    Download and reference source code from open-source examples on the internet and include them in "inc" directrory.
INDEV003 - RESOLVED - CLOSED 10/28/2020 - TESTERS_OBJECT_INHERITANCE
    6/3/2020
    It is very important that I get this part right because testing my own test software is crucial.
    The activity is to write an example of object inheritance that can be used to test OOP design-pattern implemetations with automated tests.
    I accept that implementations for different design-patterns require different tests, so I will inherit the similarities from a Tester object.
    Tester.java
    For tests to work, test objects in the test space must inherit from 
    ObservableObject.java
INDEV002 - RESOLVED - CLOSED 6/3/2020 - FIRST_FILES
    6/3/2020
    Choose which files to start first for this project and what they will do.
    I need to build a testing framework to test my first design-pattern.
    Conventional design-patterns are inherently different from one another because they are designed for specific purposes.
    Thus, I presume the testing framework must adapt to accomodate the differences between design-patterns - the differences in how they need to be tested.
    I want my testing framework to be robust. What do Factories and Decorators have in common that can help me discover what to code for the testing framework?
    I know, I'll use this as an example of Object Inheritance.
    I'll close this development and start working on object inheritance for different types of testers.
INDEV001 - RESOLVED - CLOSED 6/3/2020 - NEW_ENTRY
    6/3/2020
    This is  development ticket to explain this file: to explain development tickets! New entries go on top.
    NEW_ENTRY development number 1 marks the start of this Java Objects Project.
    Each development has an id line including the development ID, a status, an open/closed date, and a name, followed by a description on indented lines below.
    I won't be loading developmentLog.txt into a program; it is just to read.
    I'm doing this all by hand so I can make new rules if I need them, but for now consider some basic possible development statuses.
    ACTIVE:     development is in progress and workable
    WAIT:       development is not workable or not in progress
    RESOLVED:   development is closed
    CLOSED:     development is permanently closed
    Active developments should have clear requirements for them to be resolved explained in the description.
    Wait developments should have a date in the description of when and why they were set to wait.
    development descriptions should be dated.
    If a waited or resolved development is set to active, explain it in the description and write a REOPEN date in the id line.
    Resolved and Closed developments should have a close date at the end of their id line, and the description should explain.
    I am closing this development because I have now explained all the basic rules of the development log.